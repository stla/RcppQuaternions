// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// quatProd
Rcpp::NumericVector quatProd(const Rcpp::NumericVector& q1, const Rcpp::NumericVector& q2);
RcppExport SEXP _RcppQuaternions_quatProd(SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(quatProd(q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// quatInv
Rcpp::NumericVector quatInv(const Rcpp::NumericVector& q);
RcppExport SEXP _RcppQuaternions_quatInv(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(quatInv(q));
    return rcpp_result_gen;
END_RCPP
}
// fromAxisAngle_
Rcpp::NumericVector fromAxisAngle_(const Eigen::VectorXd& axis, const double& angle);
RcppExport SEXP _RcppQuaternions_fromAxisAngle_(SEXP axisSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< const double& >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(fromAxisAngle_(axis, angle));
    return rcpp_result_gen;
END_RCPP
}
// fromQuaternion_
Eigen::MatrixXd fromQuaternion_(const Rcpp::NumericVector& v);
RcppExport SEXP _RcppQuaternions_fromQuaternion_(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(fromQuaternion_(v));
    return rcpp_result_gen;
END_RCPP
}
// toAxisAngle_
Rcpp::List toAxisAngle_(const Rcpp::NumericVector& v);
RcppExport SEXP _RcppQuaternions_toAxisAngle_(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(toAxisAngle_(v));
    return rcpp_result_gen;
END_RCPP
}
// getRotation_
Rcpp::NumericVector getRotation_(const Eigen::VectorXd& a, const Eigen::VectorXd& b);
RcppExport SEXP _RcppQuaternions_getRotation_(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(getRotation_(a, b));
    return rcpp_result_gen;
END_RCPP
}
// AngleAxis2quaternion
Rcpp::NumericVector AngleAxis2quaternion(const double& angl, const Eigen::VectorXd& axs);
RcppExport SEXP _RcppQuaternions_AngleAxis2quaternion(SEXP anglSEXP, SEXP axsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type angl(anglSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type axs(axsSEXP);
    rcpp_result_gen = Rcpp::wrap(AngleAxis2quaternion(angl, axs));
    return rcpp_result_gen;
END_RCPP
}
// Matrix2AxisAngle_
Rcpp::List Matrix2AxisAngle_(const Eigen::MatrixXd& m);
RcppExport SEXP _RcppQuaternions_Matrix2AxisAngle_(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix2AxisAngle_(m));
    return rcpp_result_gen;
END_RCPP
}
// toQuaternion_
Rcpp::NumericVector toQuaternion_(const Eigen::MatrixXd& m);
RcppExport SEXP _RcppQuaternions_toQuaternion_(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(toQuaternion_(m));
    return rcpp_result_gen;
END_RCPP
}
// AngleAxis2matrix_
Eigen::MatrixXd AngleAxis2matrix_(const double& angl, const Eigen::VectorXd& axs);
RcppExport SEXP _RcppQuaternions_AngleAxis2matrix_(SEXP anglSEXP, SEXP axsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type angl(anglSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type axs(axsSEXP);
    rcpp_result_gen = Rcpp::wrap(AngleAxis2matrix_(angl, axs));
    return rcpp_result_gen;
END_RCPP
}
// normalized
Rcpp::NumericVector normalized(const Rcpp::NumericVector& v);
RcppExport SEXP _RcppQuaternions_normalized(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(normalized(v));
    return rcpp_result_gen;
END_RCPP
}
// slerp_
Rcpp::NumericMatrix slerp_(const Rcpp::NumericVector& q1, const Rcpp::NumericVector& q2, const Rcpp::NumericVector& t);
RcppExport SEXP _RcppQuaternions_slerp_(SEXP q1SEXP, SEXP q2SEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(slerp_(q1, q2, t));
    return rcpp_result_gen;
END_RCPP
}
// rversors_
Rcpp::NumericMatrix rversors_(const unsigned n);
RcppExport SEXP _RcppQuaternions_rversors_(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rversors_(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppQuaternions_quatProd", (DL_FUNC) &_RcppQuaternions_quatProd, 2},
    {"_RcppQuaternions_quatInv", (DL_FUNC) &_RcppQuaternions_quatInv, 1},
    {"_RcppQuaternions_fromAxisAngle_", (DL_FUNC) &_RcppQuaternions_fromAxisAngle_, 2},
    {"_RcppQuaternions_fromQuaternion_", (DL_FUNC) &_RcppQuaternions_fromQuaternion_, 1},
    {"_RcppQuaternions_toAxisAngle_", (DL_FUNC) &_RcppQuaternions_toAxisAngle_, 1},
    {"_RcppQuaternions_getRotation_", (DL_FUNC) &_RcppQuaternions_getRotation_, 2},
    {"_RcppQuaternions_AngleAxis2quaternion", (DL_FUNC) &_RcppQuaternions_AngleAxis2quaternion, 2},
    {"_RcppQuaternions_Matrix2AxisAngle_", (DL_FUNC) &_RcppQuaternions_Matrix2AxisAngle_, 1},
    {"_RcppQuaternions_toQuaternion_", (DL_FUNC) &_RcppQuaternions_toQuaternion_, 1},
    {"_RcppQuaternions_AngleAxis2matrix_", (DL_FUNC) &_RcppQuaternions_AngleAxis2matrix_, 2},
    {"_RcppQuaternions_normalized", (DL_FUNC) &_RcppQuaternions_normalized, 1},
    {"_RcppQuaternions_slerp_", (DL_FUNC) &_RcppQuaternions_slerp_, 3},
    {"_RcppQuaternions_rversors_", (DL_FUNC) &_RcppQuaternions_rversors_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppQuaternions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
